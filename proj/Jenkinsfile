pipeline {
    agent {
        label "platform_${env.PLATFORM} && unity"
    }

    environment {
        AUTH_MAD = credentials('auth_mad')
        AUTH_CRASHINATOR = credentials('auth_crashinator')
        KEYCHAIN_PASSWORD = credentials('keychain_password')
        PROJ_PATH = "Build"
        MOBILEPKGTOOLS_LOGFILE = "buildlog.txt"
        MOBILEPKGBUILD_CONFIG = "${env.CONFIG}"
        MOBILEPKGBUILD_FLAVOR = "${env.FLAVOR}"

        UNITY_PROJ_NAME = "Project"
        MOBILEPKGUNITY_VERSION = "~=2018.1.6"
        MOBILEPKGUNITY_CONFIG = "${env.CONFIG}"
        MOBILEPKGUNITY_PLATFORM = "${env.PLATFORM}"
    }

    stages {

        stage("Update git submodules") {
            steps {
                sh "git submodule foreach --recursive git clean -df"
                sh "git submodule foreach --recursive git reset --hard"
                sh "git submodule update --recursive --init"
            }
        }

        stage("Generate Build Server Settings") {
            steps {
                script {
                    sh "mobilepkgunity ${env.UNITY_PROJ_NAME} ${env.PROJ_PATH} --prepare"
                }
            }
        }

        stage("Prepare MAD project") {
            steps {
                sh "mobilepkgdeploy mad prepare ${env.PROJ_PATH}"
            }
        }

        stage("Generate project") {
            steps {
                script {
                    sh "mobilepkgunity ${env.UNITY_PROJ_NAME} ${env.PROJ_PATH}"
                }
            }
        }

        stage("Build project") {
            steps {
                sh "mobilepkgbuild ${env.PROJ_PATH}"
            }
        }

        stage("Submission Checks") {
            steps {
                sh "mobilepkgcheck ${env.PROJ_PATH} -v"
            }
        }

        stage("Upload to Crashinator") {
            steps {
                sh "mobilepkgdeploy crash run ${env.PROJ_PATH}"
            }
        }

        stage("Upload to MAD") {
            steps {
                sh "mobilepkgdeploy mad run ${env.PROJ_PATH}"
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${env.MOBILEPKGTOOLS_LOGFILE}", allowEmptyArchive: true
            // android
            archiveArtifacts artifacts: "${env.PROJ_PATH}/*/build/outputs/apk/*.apk", fingerprint: true, allowEmptyArchive: true
            archiveArtifacts artifacts: "${env.PROJ_PATH}/*/build/intermediates/jniLibs/*/*/*.so", fingerprint: true, allowEmptyArchive: true
            // ios
            archiveArtifacts artifacts: "${env.PROJ_PATH}/pkg/*/*/*/*.ipa", fingerprint: true, allowEmptyArchive: true
            archiveArtifacts artifacts: "${env.PROJ_PATH}/pkg/*/*/*.xcarchive/dSYMs/*.app.dSYM.zip", fingerprint: true, allowEmptyArchive: true
            // macos
            archiveArtifacts artifacts: "${env.PROJ_PATH}/pkg/*/*/*/*.app.zip", fingerprint: true, allowEmptyArchive: true
            // windows
            archiveArtifacts artifacts: "${env.PROJ_PATH}/*.zip", fingerprint: true, allowEmptyArchive: true
        }

        failure {
            script {
                if (env.SP_BUILD_ENVIRONMENT == 'production') {
                    sh "mobilepkgdeploy result run --failure ${env.PROJ_PATH}"
                }
            }
        }

        success {
            script {
                if (env.SP_BUILD_ENVIRONMENT == 'production') {
                    sh "mobilepkgdeploy result run --success ${env.PROJ_PATH}"
                }
            }
        }
    }
}
