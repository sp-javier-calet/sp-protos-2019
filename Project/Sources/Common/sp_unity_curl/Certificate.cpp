//
//  Certificate.cpp
//  sp_unity_plugins
//
//  Created by Manuel √Ålvarez de Toledoon 23/09/16.
//
//

#include "Certificate.hpp"
#include <map>

namespace
{
    // sha256//sGYj4r/mnjRz3syQWx8IV+kiUODjy5f0Ss4oaYrwR50=
    static const uint8_t pinnedCertBaseGame[] = {0x44, 0x63, 0x4D, 0x75, 0x77, 0x87, 0xD2, 0x55, 0x44, 0x4C, 0x75, 0x2D, 0x76,
                                                 0xC3, 0xD2, 0x17, 0x59, 0x61, 0x7E, 0x3D, 0x71, 0xC2, 0x84, 0x2B, 0x60, 0x73,
                                                 0x14, 0x0E, 0x14, 0x9A, 0x96, 0x13, 0x62, 0x44, 0x68, 0x2D, 0x3B, 0x84, 0x9B,
                                                 0x4A, 0x64, 0x78, 0x18, 0x28, 0x23, 0xE8, 0x8F, 0x0D, 0x65, 0x3E, 0x1C, 0x7A};

    // sha256///sdIuK4VrbGBsCFHmQJFCTnWERJZe8gNXphH3gcS7v8=
    static const uint8_t pinnedCertDragonLand[] = {0x44, 0x63, 0x4D, 0x75, 0x77, 0x87, 0xD2, 0x55, 0x18, 0x78, 0x48, 0x0E, 0x37,
                                                   0xFA, 0xC9, 0x2C, 0x45, 0x69, 0x6B, 0x05, 0x31, 0xF2, 0xBB, 0x32, 0x5A, 0x5A,
                                                   0x66, 0x01, 0x01, 0xE5, 0x93, 0x2D, 0x72, 0x59, 0x66, 0x1D, 0x27, 0x89, 0x9A,
                                                   0x34, 0x6F, 0x7B, 0x44, 0x0F, 0x71, 0xD6, 0x9E, 0x29, 0x00, 0x7D, 0x14, 0x7A};

    // sha256//syRv+CQwrcHdmCVoxIwgl0RIipmnOw6oxPnYVFD1iUw=
    static const uint8_t pinnedCertDragonStadium[] = {0x44, 0x63, 0x4D, 0x75, 0x77, 0x87, 0xD2, 0x55, 0x44, 0x72, 0x7E, 0x31, 0x69,
                                                      0xF2, 0xAC, 0x0D, 0x45, 0x68, 0x64, 0x23, 0x2F, 0xF2, 0xAB, 0x15, 0x4F, 0x42,
                                                      0x5B, 0x20, 0x2E, 0x81, 0xAF, 0x33, 0x5E, 0x7B, 0x41, 0x29, 0x0D, 0xC6, 0xCB,
                                                      0x15, 0x4F, 0x5B, 0x42, 0x1E, 0x14, 0xF7, 0xB9, 0x4B, 0x5E, 0x5E, 0x5B, 0x7A};

    // sha256//ivuGWwyRdizh+K9FPw4i8GZQv4GriBWFlNdtkZSVJ28=
    static const uint8_t pinnedCertLeagueOfDragons[] = {0x44, 0x63, 0x4D, 0x75, 0x77, 0x87, 0xD2, 0x55, 0x5E, 0x7D, 0x59, 0x00, 0x15,
                                                        0xC6, 0x84, 0x28, 0x53, 0x62, 0x56, 0x2F, 0x69, 0xFA, 0xC4, 0x3C, 0x67, 0x7C,
                                                        0x18, 0x2E, 0x7A, 0xF6, 0xA7, 0x2B, 0x41, 0x3F, 0x6B, 0x35, 0x2B, 0xF3, 0xAA,
                                                        0x3C, 0x5B, 0x45, 0x48, 0x33, 0x29, 0xEB, 0xAE, 0x2C, 0x7D, 0x39, 0x14, 0x7A};

    // sha256//RBrCiBFaBU+42LdYpectgJdYbXN6wA+wQ+i6EBB+qwA=
    static const uint8_t pinnedCertWorldChef[] = {0x44, 0x63, 0x4D, 0x75, 0x77, 0x87, 0xD2, 0x55, 0x65, 0x49, 0x5E, 0x04, 0x2B,
                                                  0xF3, 0xBB, 0x1B, 0x75, 0x5E, 0x07, 0x73, 0x70, 0xFD, 0x99, 0x23, 0x47, 0x6E,
                                                  0x4F, 0x33, 0x25, 0xFB, 0x99, 0x23, 0x55, 0x53, 0x62, 0x71, 0x35, 0xF0, 0xD6,
                                                  0x0D, 0x66, 0x20, 0x45, 0x71, 0x07, 0xF3, 0xBF, 0x51, 0x46, 0x7C, 0x6D, 0x7A};


    /*
     * Static structure and methods for available certificates definition
     */

    struct CertificateInfo
    {
        const uint8_t* key;
        const size_t keySize;
    };

    #define CERTIFICATE_INFO(cert)           \
    {                                        \
        cert, sizeof(cert) / sizeof(cert[0]) \
    }

    std::map<std::string, CertificateInfo> availableCertificates = {{"basegame", CERTIFICATE_INFO(pinnedCertBaseGame)},
                                                                    {"dragonland", CERTIFICATE_INFO(pinnedCertDragonLand)},
                                                                    {"dragonstadium", CERTIFICATE_INFO(pinnedCertDragonStadium)},
                                                                    {"leagueofdragons", CERTIFICATE_INFO(pinnedCertLeagueOfDragons)},
                                                                    {"worldchef", CERTIFICATE_INFO(pinnedCertWorldChef)}};

    CertificateInfo DefaultCertificate CERTIFICATE_INFO(pinnedCertBaseGame);

    const CertificateInfo& get(const std::string& name)
    {
        auto it = availableCertificates.find(name);
        if(it != availableCertificates.end())
        {
            return it->second;
        }
        else
        {
            return DefaultCertificate;
        }
    }
}


/*
 * Certificate class implementation
 */

Certificate::Certificate()
: key(nullptr)
, keySize(0)
{
}

Certificate::Certificate(const std::string& name)
: Certificate()
{
    auto cert = get(name);
    key = cert.key;
    keySize = cert.keySize;
}

void Certificate::obfuscate(const uint8_t* in, uint8_t** out, size_t size)
{
    static const uint8_t secret[] = {55, 11, 44, 71, 66, 177, 253, 122};
    (*out) = new uint8_t[size + 1];// size + null terminated char

    for(size_t i = 0; i < size; ++i)
    {
        (*out)[i] = in[i] ^ secret[i % (sizeof(secret) / sizeof(secret[0]))];
    }

    (*out)[size] = 0;
}

bool Certificate::getPinnedKey(uint8_t** out)
{
    if(key != nullptr)
    {
        obfuscate(key, out, keySize);
        return true;
    }
    return false;
}
