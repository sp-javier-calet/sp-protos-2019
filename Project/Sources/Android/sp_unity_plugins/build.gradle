// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()

        maven {
            name "Google's maven repo"
            url "https://maven.google.com"
        }
    }
}

/* Configure Unity app path using the parameter `unityInstallationPath` */
def UNITY_CLASSES_PATH = "/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes/classes.jar"
def unityClassesPath;
if(hasProperty('unityInstallationPath') && 
    unityInstallationPath?.trim()) {
    unityClassesPath = unityInstallationPath + UNITY_CLASSES_PATH
} else {
    def DEFAULT_UNITY_PATH = getFirstDirectoryMatching("/Applications", "Unity").toString()
    unityClassesPath = DEFAULT_UNITY_PATH + UNITY_CLASSES_PATH
}

println "Using Unity installation in : " + unityClassesPath

import groovy.io.FileType

ext {
    gitFolder = getGitFolder();
}

def getGitFolder() {

    def gitFolder = ""
    def process = "git rev-parse --show-toplevel".execute()
    process.in.eachLine { line -> gitFolder = line }
    process.err.eachLine { line -> println line }
    process.waitFor()
    return gitFolder
}

def getFirstDirectoryMatching(searchFolder, pattern) {

    def result = []
    new File(searchFolder).eachFileRecurse(FileType.DIRECTORIES) { folder ->
        if(!folder.isHidden() && folder.absolutePath.contains(pattern)) {
            result << folder
            return
        }
    }
    if(!result.empty)
    {
        def dir = result.get(0)
        println dir
        return dir
    }

    throw new Exception(pattern + " not found")
}

def dirPattern = "Sparta/Binaries/Android"
def copyDst = getFirstDirectoryMatching(gitFolder, dirPattern)

/* Injects configuration in all children projects */
subprojects{
    apply plugin: 'com.android.library'

    /* Configure plugins compilation */
    project.android {
        compileSdkVersion 27
        buildToolsVersion "27.0.2"


        defaultConfig {
            minSdkVersion 15
            targetSdkVersion 27
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

    /* Add a provided dependency with Unity java classes */
    project.dependencies{
        provided files(unityClassesPath)
    }

    /*
     * Copy release package to the Assets folder
     */
    task copyPluginPackage(type: Copy, group: 'socialpoint') {
        from('build/outputs/aar')
        into("$copyDst")
        include(project.name + '-release.aar')
        rename (project.name + '-release.aar', project.name + '.aar')
    }

    /*
     * Generates the .aar package and copy it to the Unity Project's Assets folder
     */
    task generateUnityPlugin
    generateUnityPlugin.dependsOn 'assembleRelease', 'copyPluginPackage'
    generateUnityPlugin.group 'socialpoint'
}
