using UnityEngine;
using UnityEditor;

using System;
using System.Collections.Generic;

[AssetBundleGraph.CustomValidator("MyValidator", typeof(RenderTexture))]
public class MyValidator : AssetBundleGraph.IValidator {

	[SerializeField] private bool checkSomething;

	
	// Tells the validator if this object should be validated or is an exception.	
	public bool ShouldValidate(object asset) {
		return true;
	}


	// Validate things. 
	public bool Validate (object asset) {
		return true;
	}

	
	//When the validation fails you can try to recover in here and return if it is recovered
	public bool TryToRecover(object asset) {
		return false;
	}

	
	// When validation is failed and unrecoverable you may perform your own operations here but a message needs to be returned to be printed.
	public string ValidationFailed(object asset) {
		return ((UnityEngine.Object)asset).name + " invalid";
	}


	// Draw inspector gui 
	public void OnInspectorGUI (Action onValueChanged) {
		GUILayout.Label("MyValidator!");

		var newValue = EditorGUILayout.Toggle("Check Something", checkSomething);
		if(newValue != checkSomething) {
			checkSomething = newValue;
			onValueChanged();
		}
	}

	// serialize this class to JSON 
	public string Serialize() {
		return JsonUtility.ToJson(this);
	}
}
